约定的目的:
 类库的开发者必须有权限进行修改和改进,并确保客户代码不会因为这些发动而受到影响
访问权限修饰词的目的:
 用来解决不清楚哪些域已经被客户端各种员所调用,改动类的成员有可能破坏客户端程序员的代码的情况.
 ~~~供类库开发人员向客户端程序员指明哪些是可用的,哪些是不可用的.
 权限从大到小: 
 	public : 无论是谁都可访问
 	protected :继承访问权限
 	包访问权限(无关键字): 有时表示为friendly:包内其他类对该成员都有访问权限,但对于这个包之外的所有类,这个成员却是private
 	private : 除包含该成员的类之外,其他任何类都无法访问这个成员 
 	**构造器是私有的,则无法被继承
package : 库单元,包内包含有一组类,它们在单一的名字空间之下被组织在了一起
  用来解决的问题:构件类库的概念以及对于谁有权取胜该类库构件的控制问题都还不完善,其仍旧存在着如何将构件捆绑到一个内聚的类库单元中的问题
  未命名包,默认包
  
  独一无二的包名:反顺序域名
  
接口和实现:
	封装: 把数据和方法包装进类中,以及具体实现的隐藏,常共同被称作是封装
	出于两个重要原因,访问权限控制将权限的边界划在了数据类型的内部
		1.要设定客户端程序员可以使用和不可以使用的界限(可以在结构中建立自己的内部机制,而不必担心客户端程序员会偶然地将内部机制当作是他们可以使用的接口的一部分)
		2.将接口和具体实现进行分离(如果结构是用于一组程序之中,而客户端程序员除了可以向接口发送信息之外什么也不可以做的话,那么就可以随意更改所有不是public的东西(例如包访问权限,protected,和private的成员),而不会破坏客户端代码)
		创建类的形式一般采用: public --> protected --> 包访问权限 --> private 
		3.虽然不是很常用,介编译单元内完全不带public类也是可能的.(这种情况下,可以随意对文件命名)

类的访问权限:
	1.第个编译单元(文件)都只能有一个public类
	2.public类的名称必须完全与含有该编译单元的文件名相匹配,包括大小写
	3.类不可是private和protected的(如果不希望其他任何人对该类拥有访问权限,可以把所有的构造器都指定为private,从而阻止任何人创建该类的对象,但是有一个例外,就是你在该类的static成员内部可以创建(内部类可以是private或protected的))
总结: 控件对成员的访问权限有两个原因:
	1.为了使用户不要碰触那些他们不该碰触的部分(这些部分对于类内部的操作是必要的,但是它并不属于客户端程序员所需接口的一部分)
	2.让类库设计者可以更改类的内部工作方式,而不必担心这样会对客户端程序员产生重大的影响
	